{"remainingRequest":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js??ref--13-0!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/babel-loader/lib/index.js!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/views/app/ui-kits/bootstrap-tab.vue?vue&type=template&id=db40ca0a&","dependencies":[{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/views/app/ui-kits/bootstrap-tab.vue","mtime":1600728574000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/babel.config.js","mtime":1600728574000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jOwogIHJldHVybiBfYygnZGl2JywgewogICAgc3RhdGljQ2xhc3M6ICJtYWluLWNvbnRlbnQiCiAgfSwgW19jKCdicmVhZGN1bWInLCB7CiAgICBhdHRyczogewogICAgICAicGFnZSI6ICdCb290c3RyYXAgVnVlIFRhYiAnLAogICAgICAiZm9sZGVyIjogJ1VJIEtpdHMnCiAgICB9CiAgfSksIF9jKCdkaXYnLCB7CiAgICBzdGF0aWNDbGFzczogInJvdyIKICB9LCBbX2MoJ2ItY29sJywgewogICAgYXR0cnM6IHsKICAgICAgIm1kIjogIjYiCiAgICB9CiAgfSwgW19jKCdiLWNhcmQnLCB7CiAgICBzdGF0aWNDbGFzczogImNhcmQgbWItMzAiLAogICAgYXR0cnM6IHsKICAgICAgImhlYWRlciI6ICJCYXNpYyBUYWJzIiwKICAgICAgImhlYWRlci1iZy12YXJpYW50IjogInRyYW5zcGFyZW50ICIKICAgIH0KICB9LCBbX2MoJ2ItdGFicycsIHsKICAgIGF0dHJzOiB7CiAgICAgICJhY3RpdmUtbmF2LWl0ZW0tY2xhc3MiOiAibmF2IG5hdi10YWJzIiwKICAgICAgImNvbnRlbnQtY2xhc3MiOiAibXQtMyIKICAgIH0KICB9LCBbX2MoJ2ItdGFiJywgewogICAgYXR0cnM6IHsKICAgICAgInRpdGxlIjogIkhvbWUiLAogICAgICAiYWN0aXZlIjogIiIKICAgIH0KICB9LCBbX2MoJ3AnLCB7fSwgW192bS5fdigiTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhcyBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHMgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mIExvcmVtIElwc3VtLiIpXSldKSwgX2MoJ2ItdGFiJywgewogICAgYXR0cnM6IHsKICAgICAgInRpdGxlIjogIlByb2ZpbGUiCiAgICB9CiAgfSwgW19jKCdwJywge30sIFtfdm0uX3YoIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiIpXSldKSwgX2MoJ2ItdGFiJywgewogICAgYXR0cnM6IHsKICAgICAgInRpdGxlIjogIkNvbnRhY3QiCiAgICB9CiAgfSwgW19jKCdwJywge30sIFtfdm0uX3YoIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiIpXSldKV0sIDEpXSwgMSksIF9jKCdkaXYnLCB7fSwgW19jKCdiLWNhcmQnLCB7CiAgICBzdGF0aWNDbGFzczogImNhcmQgbWItMzAiLAogICAgYXR0cnM6IHsKICAgICAgImhlYWRlciI6ICJBZHZhbmNlZCBFeGFtcGxlICIsCiAgICAgICJoZWFkZXItYmctdmFyaWFudCI6ICJ0cmFuc3BhcmVudCAiCiAgICB9CiAgfSwgW19jKCdiLXRhYnMnLCB7CiAgICBtb2RlbDogewogICAgICB2YWx1ZTogX3ZtLnRhYkluZGV4LAogICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soJCR2KSB7CiAgICAgICAgX3ZtLnRhYkluZGV4ID0gJCR2OwogICAgICB9LAogICAgICBleHByZXNzaW9uOiAidGFiSW5kZXgiCiAgICB9CiAgfSwgW19jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJHZW5lcmFsIgogICAgfQogIH0sIFtfdm0uX3YoIkknbSB0aGUgZmlyc3QgZmFkaW5nIHRhYiIpXSksIF9jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJFZGl0IHByb2ZpbGUiCiAgICB9CiAgfSwgW192bS5fdigiIEknbSB0aGUgc2Vjb25kIHRhYiAiKSwgX2MoJ2ItY2FyZCcsIFtfdm0uX3YoIkknbSB0aGUgY2FyZCBpbiB0YWIiKV0pXSwgMSksIF9jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJQcmVtaXVtIFBsYW4iLAogICAgICAiZGlzYWJsZWQiOiAiIgogICAgfQogIH0sIFtfdm0uX3YoIlNpYnphbWluaSEiKV0pLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiSW5mbyIKICAgIH0KICB9LCBbX3ZtLl92KCJJJ20gdGhlIGxhc3QgdGFiIildKV0sIDEpXSwgMSksIF9jKCdkaXYnLCB7CiAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIgogIH0sIFtfYygnYi1idXR0b24tZ3JvdXAnLCB7CiAgICBzdGF0aWNDbGFzczogIm10LTIiCiAgfSwgW19jKCdiLWJ1dHRvbicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ2YXJpYW50IjogIm91dGxpbmUtcHJpbWFyeSIKICAgIH0sCiAgICBvbjogewogICAgICAiY2xpY2siOiBmdW5jdGlvbiBjbGljaygkZXZlbnQpIHsKICAgICAgICBfdm0udGFiSW5kZXgtLTsKICAgICAgfQogICAgfQogIH0sIFtfdm0uX3YoIlByZXZpb3VzIildKSwgX2MoJ2ItYnV0dG9uJywgewogICAgYXR0cnM6IHsKICAgICAgInZhcmlhbnQiOiAib3V0bGluZS1wcmltYXJ5IgogICAgfSwKICAgIG9uOiB7CiAgICAgICJjbGljayI6IGZ1bmN0aW9uIGNsaWNrKCRldmVudCkgewogICAgICAgIF92bS50YWJJbmRleCsrOwogICAgICB9CiAgICB9CiAgfSwgW192bS5fdigiTmV4dCIpXSldLCAxKSwgX2MoJ2RpdicsIHsKICAgIHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtYi0zMCIKICB9LCBbX3ZtLl92KCJDdXJyZW50IFRhYjogIiArIF92bS5fcyhfdm0udGFiSW5kZXgpKV0pXSwgMSldLCAxKSwgX2MoJ2ItY2FyZCcsIHsKICAgIHN0YXRpY0NsYXNzOiAiY2FyZCBtYi0zMCIsCiAgICBhdHRyczogewogICAgICAiaGVhZGVyIjogIkljb24gVGFicyIsCiAgICAgICJoZWFkZXItYmctdmFyaWFudCI6ICJ0cmFuc3BhcmVudCAiCiAgICB9CiAgfSwgW19jKCdiLXRhYnMnLCB7CiAgICBhdHRyczogewogICAgICAiYWN0aXZlLW5hdi1pdGVtLWNsYXNzIjogIm5hdiBuYXYtdGFicyIsCiAgICAgICJjb250ZW50LWNsYXNzIjogIm10LTMiCiAgICB9CiAgfSwgW19jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJhY3RpdmUiOiAiIgogICAgfQogIH0sIFtfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGl0bGUiCiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJpLUJpby1IYXphcmQgdWwtdGFiX19pY29uIHRleHQtZGFuZ2VyIG1yLTEiCiAgfSksIF92bS5fdigiIEFjdGl2ZSAiKV0pLCBfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0sIDIpLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiIgogICAgfQogIH0sIFtfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGl0bGUiCiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJpLURvd25sb2FkIHVsLXRhYl9faWNvbiB0ZXh0LXN1Y2Nlc3MgbXItMSIKICB9KSwgX3ZtLl92KCIgRG93bmxvYWQgIildKSwgX2MoJ3AnLCB7fSwgW192bS5fdigiTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIildKV0sIDIpLCBfYygnYi10YWInLCBbX2MoJ3RlbXBsYXRlJywgewogICAgc2xvdDogInRpdGxlIgogIH0sIFtfYygnaScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaS1GaWxlLUNsaXBib2FyZC1GaWxlLS1UZXh0IHVsLXRhYl9faWNvbiB0ZXh0LW11dGVkIG1yLTEiCiAgfSksIF92bS5fdigiIENsaXAgRmlsZSAiKV0pLCBfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4iKV0pXSwgMildLCAxKSwgX2MoJ2RpdicsIHsKICAgIHN0YXRpY0NsYXNzOiAidWwtdGFiX19ib3JkZXIiCiAgfSksIF9jKCdiLXRhYnMnLCB7CiAgICBhdHRyczogewogICAgICAiYWN0aXZlLW5hdi1pdGVtLWNsYXNzIjogIm5hdiBuYXYtdGFicyIsCiAgICAgICJjb250ZW50LWNsYXNzIjogIm10LTMiCiAgICB9CiAgfSwgW19jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJhY3RpdmUiOiAiIgogICAgfQogIH0sIFtfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGl0bGUiCiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJpLUJpby1IYXphcmQgdWwtdGFiX19pY29uIHRleHQtZGFuZ2VyIG1yLTEiCiAgfSksIF92bS5fdigiIEFjdGl2ZSAiKV0pLCBfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0sIDIpLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiIgogICAgfQogIH0sIFtfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGl0bGUiCiAgfSwgW19jKCdpJywgewogICAgc3RhdGljQ2xhc3M6ICJpLURvd25sb2FkIHVsLXRhYl9faWNvbiB0ZXh0LXN1Y2Nlc3MgbXItMSIKICB9KSwgX3ZtLl92KCIgRG93bmxvYWQgIildKSwgX2MoJ3AnLCB7fSwgW192bS5fdigiTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIildKV0sIDIpLCBfYygnYi10YWInLCBbX2MoJ3RlbXBsYXRlJywgewogICAgc2xvdDogInRpdGxlIgogIH0sIFtfYygnaScsIHsKICAgIHN0YXRpY0NsYXNzOiAiaS1GaWxlLUNsaXBib2FyZC1GaWxlLS1UZXh0IHVsLXRhYl9faWNvbiB0ZXh0LW11dGVkIG1yLTEiCiAgfSksIF92bS5fdigiIENsaXAgRmlsZSAiKV0pLCBfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4iKV0pXSwgMildLCAxKV0sIDEpLCBfYygnYi1jYXJkJywgewogICAgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTMwIiwKICAgIGF0dHJzOiB7CiAgICAgICJoZWFkZXIiOiAiQWRqdXN0ZWQgVGFicyIsCiAgICAgICJoZWFkZXItYmctdmFyaWFudCI6ICJ0cmFuc3BhcmVudCAiCiAgICB9CiAgfSwgW19jKCdiLXRhYnMnLCB7CiAgICBhdHRyczogewogICAgICAiY29udGVudC1jbGFzcyI6ICJtdC0zIiwKICAgICAgImp1c3RpZmllZCI6ICIiCiAgICB9CiAgfSwgW19jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJGaXJzdCIsCiAgICAgICJhY3RpdmUiOiAiIgogICAgfQogIH0sIFtfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0pLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiU2Vjb25kIgogICAgfQogIH0sIFtfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0pLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiVmVyeSwgdmVyeSBsb25nIHRpdGxlIgogICAgfQogIH0sIFtfYygncCcsIHt9LCBbX3ZtLl92KCJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0pLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiRGlzYWJsZWQiLAogICAgICAiZGlzYWJsZWQiOiAiIgogICAgfQogIH0sIFtfYygncCcsIFtfdm0uX3YoIkknbSBhIGRpc2FibGVkIHRhYiEiKV0pXSldLCAxKV0sIDEpXSwgMSksIF9jKCdiLWNvbCcsIHsKICAgIGF0dHJzOiB7CiAgICAgICJtZCI6ICI2IgogICAgfQogIH0sIFtfYygnYi1jYXJkJywgewogICAgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTMwIiwKICAgIGF0dHJzOiB7CiAgICAgICJoZWFkZXIiOiAiUGlsbHMiLAogICAgICAiaGVhZGVyLWJnLXZhcmlhbnQiOiAidHJhbnNwYXJlbnQgIgogICAgfQogIH0sIFtfYygnYi10YWJzJywgewogICAgYXR0cnM6IHsKICAgICAgInBpbGxzIjogIiIKICAgIH0KICB9LCBbX2MoJ2ItdGFiJywgewogICAgYXR0cnM6IHsKICAgICAgInRpdGxlIjogIkFjdGl2ZSIsCiAgICAgICJhY3RpdmUiOiAiIgogICAgfQogIH0sIFtfYygnYi1jYXJkLXRleHQnLCB7fSwgW192bS5fdigiIExvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiBJdCB3YXMgcG9wdWxhcmlzZWQgaW4gdGhlIDE5NjBzIHdpdGggdGhlIHJlbGVhc2Ugb2YgTGV0cmFzZXQgc2hlZXRzIGNvbnRhaW5pbmcgTG9yZW0gSXBzdW0gcGFzc2FnZXMsIGFuZCBtb3JlIHJlY2VudGx5IHdpdGggZGVza3RvcCBwdWJsaXNoaW5nIHNvZnR3YXJlIGxpa2UgQWxkdXMgUGFnZU1ha2VyIGluY2x1ZGluZyB2ZXJzaW9ucyBvZiBMb3JlbSBJcHN1bS4gIildKV0sIDEpLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiRG93bmxvYWQiCiAgICB9CiAgfSwgW19jKCdiLWNhcmQtdGV4dCcsIHt9LCBbX3ZtLl92KCIgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhcyBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHMgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mIExvcmVtIElwc3VtLiAiKV0pXSwgMSksIF9jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJEaXNhYmxlZCIsCiAgICAgICJkaXNhYmxlZCI6ICIiCiAgICB9CiAgfSwgW19jKCdiLWNhcmQtdGV4dCcsIHt9LCBbX3ZtLl92KCIgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhcyBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHMgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mIExvcmVtIElwc3VtLiAiKV0pXSwgMSldLCAxKV0sIDEpLCBfYygnZGl2JywgW19jKCdiLWNhcmQnLCB7CiAgICBzdGF0aWNDbGFzczogImNhcmQgbWItMzAiLAogICAgYXR0cnM6IHsKICAgICAgImhlYWRlciI6ICJEeW5hbWljIiwKICAgICAgImhlYWRlci1iZy12YXJpYW50IjogInRyYW5zcGFyZW50ICIKICAgIH0KICB9LCBbX2MoJ2ItdGFicycsIFtfdm0uX2woX3ZtLnRhYnMsIGZ1bmN0aW9uIChpKSB7CiAgICByZXR1cm4gX2MoJ2ItdGFiJywgewogICAgICBrZXk6ICJkeW4tdGFiLSIuY29uY2F0KGkpLAogICAgICBhdHRyczogewogICAgICAgICJ0aXRsZSI6ICJUYWIgIi5jb25jYXQoaSkKICAgICAgfQogICAgfSwgW192bS5fdigiIFRhYiBDb250ZW50cyAiICsgX3ZtLl9zKGkpICsgIiAiKSwgX2MoJ2ItYnV0dG9uJywgewogICAgICBzdGF0aWNDbGFzczogImZsb2F0LXJpZ2h0IiwKICAgICAgYXR0cnM6IHsKICAgICAgICAic2l6ZSI6ICJzbSIsCiAgICAgICAgInZhcmlhbnQiOiAiZGFuZ2VyIgogICAgICB9LAogICAgICBvbjogewogICAgICAgICJjbGljayI6IGZ1bmN0aW9uIGNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF92bS5jbG9zZVRhYihpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIFtfdm0uX3YoIiBDbG9zZSB0YWIgIildKV0sIDEpOwogIH0pLCBfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGFicyIKICB9LCBbX2MoJ2ItbmF2LWl0ZW0nLCB7CiAgICBhdHRyczogewogICAgICAiaHJlZiI6ICIjIgogICAgfSwKICAgIG9uOiB7CiAgICAgICJjbGljayI6IGZ1bmN0aW9uIGNsaWNrKCRldmVudCkgewogICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHJldHVybiBfdm0ubmV3VGFiLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgIH0KICB9LCBbX2MoJ2InLCBbX3ZtLl92KCIrIildKV0pXSwgMSksIF9jKCdkaXYnLCB7CiAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHRleHQtbXV0ZWQiLAogICAgYXR0cnM6IHsKICAgICAgInNsb3QiOiAiZW1wdHkiCiAgICB9LAogICAgc2xvdDogImVtcHR5IgogIH0sIFtfdm0uX3YoIiBUaGVyZSBhcmUgbm8gb3BlbiB0YWJzIiksIF9jKCdicicpLCBfdm0uX3YoIiBPcGVuIGEgbmV3IHRhYiB1c2luZyB0aGUgIiksIF9jKCdiJywgW192bS5fdigiKyIpXSksIF92bS5fdigiIGJ1dHRvbiBhYm92ZS4gIildKV0sIDIpXSwgMSldLCAxKSwgX2MoJ2ItY2FyZCcsIHsKICAgIHN0YXRpY0NsYXNzOiAiY2FyZCBtYi0zMCIsCiAgICBhdHRyczogewogICAgICAiaGVhZGVyIjogIkFkZCBjdXN0b20gY29udGVudCB0byB0YWIgdGl0bGUgIiwKICAgICAgImhlYWRlci1iZy12YXJpYW50IjogInRyYW5zcGFyZW50ICIKICAgIH0KICB9LCBbX2MoJ2ItdGFicycsIFtfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAiYWN0aXZlIjogIiIKICAgIH0KICB9LCBbX2MoJ3RlbXBsYXRlJywgewogICAgc2xvdDogInRpdGxlIgogIH0sIFtfYygnYi1zcGlubmVyJywgewogICAgYXR0cnM6IHsKICAgICAgInR5cGUiOiAiZ3JvdyIsCiAgICAgICJzbWFsbCI6ICIiCiAgICB9CiAgfSksIF92bS5fdigiIEknbSAiKSwgX2MoJ2knLCBbX3ZtLl92KCJDdXN0b20iKV0pLCBfdm0uX3YoIiAiKSwgX2MoJ3N0cm9uZycsIFtfdm0uX3YoIlRpdGxlIildKV0sIDEpLCBfYygncCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicC0zIgogIH0sIFtfdm0uX3YoIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiBJdCB3YXMgcG9wdWxhcmlzZWQgaW4gdGhlIDE5NjBzIHdpdGggdGhlIHJlbGVhc2Ugb2YgTGV0cmFzZXQgc2hlZXRzIGNvbnRhaW5pbmcgTG9yZW0gSXBzdW0gcGFzc2FnZXMsIGFuZCBtb3JlIHJlY2VudGx5IHdpdGggZGVza3RvcCBwdWJsaXNoaW5nIHNvZnR3YXJlIGxpa2UgQWxkdXMgUGFnZU1ha2VyIGluY2x1ZGluZyB2ZXJzaW9ucyBvZiBMb3JlbSBJcHN1bS4iKV0pXSwgMiksIF9jKCdiLXRhYicsIFtfYygndGVtcGxhdGUnLCB7CiAgICBzbG90OiAidGl0bGUiCiAgfSwgW19jKCdiLXNwaW5uZXInLCB7CiAgICBhdHRyczogewogICAgICAidHlwZSI6ICJib3JkZXIiLAogICAgICAic21hbGwiOiAiIgogICAgfQogIH0pLCBfdm0uX3YoIiBUYWIgMiAiKV0sIDEpLCBfYygncCcsIHsKICAgIHN0YXRpY0NsYXNzOiAicC0zIgogIH0sIFtfdm0uX3YoIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiBJdCB3YXMgcG9wdWxhcmlzZWQgaW4gdGhlIDE5NjBzIHdpdGggdGhlIHJlbGVhc2Ugb2YgTGV0cmFzZXQgc2hlZXRzIGNvbnRhaW5pbmcgTG9yZW0gSXBzdW0gcGFzc2FnZXMsIGFuZCBtb3JlIHJlY2VudGx5IHdpdGggZGVza3RvcCBwdWJsaXNoaW5nIHNvZnR3YXJlIGxpa2UgQWxkdXMgUGFnZU1ha2VyIGluY2x1ZGluZyB2ZXJzaW9ucyBvZiBMb3JlbSBJcHN1bS4iKV0pXSwgMildLCAxKV0sIDEpLCBfYygnYi1jYXJkJywgewogICAgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTMwIiwKICAgIGF0dHJzOiB7CiAgICAgICJoZWFkZXIiOiAiQWRqdXN0ZWQgUGlsbHMiLAogICAgICAiaGVhZGVyLWJnLXZhcmlhbnQiOiAidHJhbnNwYXJlbnQgIgogICAgfQogIH0sIFtfYygnYi10YWJzJywgewogICAgYXR0cnM6IHsKICAgICAgInBpbGxzIjogIiIsCiAgICAgICJqdXN0aWZpZWQiOiAiIgogICAgfQogIH0sIFtfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiQWN0aXZlIiwKICAgICAgImFjdGl2ZSI6ICIiCiAgICB9CiAgfSwgW19jKCdiLWNhcmQtdGV4dCcsIHt9LCBbX3ZtLl92KCIgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhcyBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHMgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mIExvcmVtIElwc3VtLiAiKV0pXSwgMSksIF9jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJEb3dubG9hZCIKICAgIH0KICB9LCBbX2MoJ2ItY2FyZC10ZXh0Jywge30sIFtfdm0uX3YoIiBMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uICIpXSldLCAxKSwgX2MoJ2ItdGFiJywgewogICAgYXR0cnM6IHsKICAgICAgInRpdGxlIjogIkRpc2FibGVkIiwKICAgICAgImRpc2FibGVkIjogIiIKICAgIH0KICB9LCBbX2MoJ2ItY2FyZC10ZXh0Jywge30sIFtfdm0uX3YoIiBMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uICIpXSldLCAxKV0sIDEpXSwgMSksIF9jKCdiLWNhcmQnLCB7CiAgICBzdGF0aWNDbGFzczogImNhcmQgbWItMzAiLAogICAgYXR0cnM6IHsKICAgICAgImhlYWRlciI6ICJBbGlnbm1lbnQgIiwKICAgICAgImhlYWRlci1iZy12YXJpYW50IjogInRyYW5zcGFyZW50ICIKICAgIH0KICB9LCBbX2MoJ2ItdGFicycsIHsKICAgIGF0dHJzOiB7CiAgICAgICJjb250ZW50LWNsYXNzIjogIm10LTMiLAogICAgICAiYWxpZ24iOiAiY2VudGVyIgogICAgfQogIH0sIFtfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiRmlyc3QiLAogICAgICAiYWN0aXZlIjogIiIKICAgIH0KICB9LCBbX2MoJ3AnLCB7fSwgW192bS5fdigiIExvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlIHNwZWNpbWVuIGJvb2suIEl0IGhhcyBzdXJ2aXZlZCBub3Qgb25seSBmaXZlIGNlbnR1cmllcywgYnV0IGFsc28gdGhlIGxlYXAgaW50byBlbGVjdHJvbmljIHR5cGVzZXR0aW5nLCByZW1haW5pbmcgZXNzZW50aWFsbHkgdW5jaGFuZ2VkLiBJdCB3YXMgcG9wdWxhcmlzZWQgaW4gdGhlIDE5NjBzIHdpdGggdGhlIHJlbGVhc2Ugb2YgTGV0cmFzZXQgc2hlZXRzIGNvbnRhaW5pbmcgTG9yZW0gSXBzdW0gcGFzc2FnZXMsIGFuZCBtb3JlIHJlY2VudGx5IHdpdGggZGVza3RvcCBwdWJsaXNoaW5nIHNvZnR3YXJlIGxpa2UgQWxkdXMgUGFnZU1ha2VyIGluY2x1ZGluZyB2ZXJzaW9ucyBvZiBMb3JlbSBJcHN1bS4iKV0pXSksIF9jKCdiLXRhYicsIHsKICAgIGF0dHJzOiB7CiAgICAgICJ0aXRsZSI6ICJTZWNvbmQiCiAgICB9CiAgfSwgW19jKCdwJywge30sIFtfdm0uX3YoIiBMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLCB3aGVuIGFuIHVua25vd24gcHJpbnRlciB0b29rIGEgZ2FsbGV5IG9mIHR5cGUgYW5kIHNjcmFtYmxlZCBpdCB0byBtYWtlIGEgdHlwZSBzcGVjaW1lbiBib29rLiBJdCBoYXMgc3Vydml2ZWQgbm90IG9ubHkgZml2ZSBjZW50dXJpZXMsIGJ1dCBhbHNvIHRoZSBsZWFwIGludG8gZWxlY3Ryb25pYyB0eXBlc2V0dGluZywgcmVtYWluaW5nIGVzc2VudGlhbGx5IHVuY2hhbmdlZC4gSXQgd2FzIHBvcHVsYXJpc2VkIGluIHRoZSAxOTYwcyB3aXRoIHRoZSByZWxlYXNlIG9mIExldHJhc2V0IHNoZWV0cyBjb250YWluaW5nIExvcmVtIElwc3VtIHBhc3NhZ2VzLCBhbmQgbW9yZSByZWNlbnRseSB3aXRoIGRlc2t0b3AgcHVibGlzaGluZyBzb2Z0d2FyZSBsaWtlIEFsZHVzIFBhZ2VNYWtlciBpbmNsdWRpbmcgdmVyc2lvbnMgb2YgTG9yZW0gSXBzdW0uIildKV0pLCBfYygnYi10YWInLCB7CiAgICBhdHRyczogewogICAgICAidGl0bGUiOiAiRGlzYWJsZWQiLAogICAgICAiZGlzYWJsZWQiOiAiIgogICAgfQogIH0sIFtfYygncCcsIHt9LCBbX3ZtLl92KCIgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZiB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhcyBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHMgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mIExvcmVtIElwc3VtLiIpXSldKV0sIDEpXSwgMSldLCAxKV0sIDEpXSwgMSk7Cn07CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXTsKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfTs="},null]}