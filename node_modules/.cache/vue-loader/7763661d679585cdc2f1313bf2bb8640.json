{"remainingRequest":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/containers/layouts/verticalSidebar/verticalSidebar.vue?vue&type=template&id=4a0713c6&","dependencies":[{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/containers/layouts/verticalSidebar/verticalSidebar.vue","mtime":1691360831566},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}