{"remainingRequest":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/babel-loader/lib/index.js!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/views/app/ui-kits/collapsible.vue?vue&type=template&id=6ebbe19c&","dependencies":[{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/src/views/app/ui-kits/collapsible.vue","mtime":1600728574000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/babel.config.js","mtime":1600728574000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeffseq/Documents/DashBoard Vue/vue-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}